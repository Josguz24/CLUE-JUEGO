import random
import time
from collections import OrderedDict

# Configuraci√≥n del juego
PERSONAJES = OrderedDict([
    ("Dra. Elena Rojas", "M√©dico forense"),
    ("Prof. Carlos Mendoza", "Catedr√°tico de historia"),
    ("Ing. Laura V√©lez", "Ingeniera de software"),
    ("Sr. Antonio Cruz", "Magnate inmobiliario"),
    ("Sra. Isabel Fuentes", "Due√±a de galer√≠a de arte")
])

LOCACIONES = [
    "Biblioteca",
    "Invernadero",
    "Sala de billar",
    "Observatorio",
    "Cocina profesional"
]

ARMAS = [
    "Candelabro de plata",
    "Cuerda de seda",
    "Rev√≥lver antiguo",
    "Tubo de plomo",
    "Veneno ex√≥tico"
]

# Historias del juego
HISTORIAS = {
    1: {
        "titulo": "El Misterio del Candelabro Perdido",
        "introduccion": "Durante la cena anual de la Sociedad Hist√≥rica, en medio de un apag√≥n, " +
                       "se escuch√≥ un grito desgarrador. Cuando las luces volvieron, el " +
                       "Director del Museo yac√≠a muerto en la biblioteca.",
        "pistas": [
            "Hay huellas de barro que llevan hacia la secci√≥n de bot√°nica",
            "El candelabro que iluminaba la habitaci√≥n ha desaparecido",
            "Se encontr√≥ un pa√±uelo con iniciales bordadas cerca del cuerpo"
        ],
        "culpable": "Prof. Carlos Mendoza",
        "arma": "Candelabro de plata",
        "locacion": "Biblioteca",
        "motivo": "El profesor descubri√≥ que el director planeaba vender artefactos hist√≥ricos en el mercado negro"
    },
    
    2: {
        "titulo": "Veneno entre las Rosas",
        "introduccion": "Durante la exhibici√≥n de flores ex√≥ticas en el invernadero, " +
                       "la famosa bot√°nica Dra. Hern√°ndez colaps√≥ repentinamente. " +
                       "El examen preliminar sugiere envenenamiento.",
        "pistas": [
            "Se encontr√≥ un frasco vac√≠o de un raro veneno vegetal",
            "Las huellas digitales en el vaso de la v√≠ctima fueron borradas",
            "Hab√≠a una nota amenazante escondida entre las plantas"
        ],
        "culpable": "Sra. Isabel Fuentes",
        "arma": "Veneno ex√≥tico",
        "locacion": "Invernadero",
        "motivo": "La v√≠ctima iba a exponer el plagio de sus investigaciones sobre especies raras"
    },
    
    3: {
        "titulo": "Silencio en la Sala de Billar",
        "introduccion": "El torneo anual de billar termin√≥ en tragedia cuando el campe√≥n " +
                       "fue encontrado muerto en la sala de billar, con un golpe fatal en la cabeza.",
        "pistas": [
            "El trofeo del torneo est√° manchado con sangre",
            "Se escuch√≥ una fuerte discusi√≥n minutos antes del incidente",
            "El reloj de la v√≠ctima se detuvo a las 9:15 pm"
        ],
        "culpable": "Sr. Antonio Cruz",
        "arma": "Tubo de plomo",
        "locacion": "Sala de billar",
        "motivo": "La v√≠ctima ten√≠a pruebas de sus negocios ilegales con propiedades"
    },
    
    4: {
        "titulo": "El Secreto del Observatorio",
        "introduccion": "Durante la observaci√≥n del eclipse lunar, el astr√≥nomo jefe fue " +
                       "encontrado muerto en el observatorio, estrangulado con un fino hilo.",
        "pistas": [
            "El diario de investigaci√≥n de la v√≠ctima tiene p√°ginas arrancadas",
            "Se encontr√≥ un pendrive escondido en el telescopio",
            "El reloj astron√≥mico fue manipulado para detenerse a una hora espec√≠fica"
        ],
        "culpable": "Ing. Laura V√©lez",
        "arma": "Cuerda de seda",
        "locacion": "Observatorio",
        "motivo": "La v√≠ctima descubri√≥ que hab√≠a hackeado el sistema de sat√©lites gubernamentales"
    },
    
    5: {
        "titulo": "Muerte entre Sabores",
        "introduccion": "Durante la grabaci√≥n del famoso programa de cocina 'Sabores Exquisitos', " +
                       "el chef invitado muri√≥ repentinamente despu√©s de probar su propia creaci√≥n.",
        "pistas": [
            "El an√°lisis muestra cianuro en los ingredientes",
            "La receta original fue alterada",
            "Las c√°maras de seguridad fueron saboteadas durante el incidente"
        ],
        "culpable": "Dra. Elena Rojas",
        "arma": "Rev√≥lver antiguo",
        "locacion": "Cocina profesional",
        "motivo": "La v√≠ctima hab√≠a descubierto su esquema de tr√°fico de medicamentos"
    }
}

def mostrar_personajes():
    print("\nüîç Personajes sospechosos:")
    for i, (nombre, profesion) in enumerate(PERSONAJES.items(), 1):
        print(f"{i}. {nombre} - {profesion}")

def mostrar_menu_investigacion(pistas_descubiertas, pistas_totales):
    print("\n¬øQu√© deseas hacer?")
    print("1. Investigar otra pista")
    print("2. Hacer una acusaci√≥n")
    print("3. Ver personajes sospechosos")
    print("4. Ver pistas descubiertas")
    
    if len(pistas_descubiertas) < pistas_totales:
        print(f"\nPistas disponibles: {len(pistas_descubiertas)}/{pistas_totales}")
    else:
        print("\n¬°Has descubierto todas las pistas!")

def jugar_partida():
    # Seleccionar historia aleatoria
    historia_num = random.randint(1, 5)
    historia = HISTORIAS[historia_num]
    
    print(f"\n{'='*50}")
    print(f"CASO: {historia['titulo']}")
    print(f"{'='*50}\n")
    
    # Mostrar introducci√≥n
    print(historia['introduccion'])
    print("\nTu misi√≥n es descubrir al culpable, el arma y la locaci√≥n del crimen.")
    
    # Preparar variables del juego
    pistas_descubiertas = []
    personajes_disponibles = list(PERSONAJES.keys())
    pistas_restantes = historia['pistas'].copy()
    
    while True:
        mostrar_menu_investigacion(pistas_descubiertas, len(historia['pistas']))
        
        opcion = input("\nElige una opci√≥n (1-4): ")
        
        if opcion == "1":  # Investigar pista
            if pistas_restantes:
                pista = pistas_restantes.pop(0)
                pistas_descubiertas.append(pista)
                print(f"\nüîé Nueva pista: {pista}")
                time.sleep(2)
            else:
                print("\n¬°No hay m√°s pistas por descubrir!")
                time.sleep(1)
                
        elif opcion == "2":  # Hacer acusaci√≥n
            print("\nüíÄ REALIZAR ACUSACI√ìN")
            
            # Seleccionar personaje
            mostrar_personajes()
            try:
                num_personaje = int(input("\nN√∫mero del personaje culpable: ")) - 1
                personaje = list(PERSONAJES.keys())[num_personaje]
            except (ValueError, IndexError):
                print("Selecci√≥n inv√°lida. Intenta de nuevo.")
                continue
                
            # Seleccionar arma
            print("\nüõ† Armas posibles:")
            for i, arma in enumerate(ARMAS, 1):
                print(f"{i}. {arma}")
                
            try:
                num_arma = int(input("\nN√∫mero del arma utilizada: ")) - 1
                arma = ARMAS[num_arma]
            except (ValueError, IndexError):
                print("Selecci√≥n inv√°lida. Intenta de nuevo.")
                continue
                
            # Seleccionar locaci√≥n
            print("\nüè† Locaciones posibles:")
            for i, locacion in enumerate(LOCACIONES, 1):
                print(f"{i}. {locacion}")
                
            try:
                num_locacion = int(input("\nN√∫mero de la locaci√≥n del crimen: ")) - 1
                locacion = LOCACIONES[num_locacion]
            except (ValueError, IndexError):
                print("Selecci√≥n inv√°lida. Intenta de nuevo.")
                continue
                
            # Verificar acusaci√≥n
            if (personaje == historia['culpable'] and 
                arma == historia['arma'] and 
                locacion == historia['locacion']):
                
                print(f"\n{'='*50}")
                print("¬°FELICIDADES! üéâ")
                print("Has resuelto el misterio correctamente.")
                print(f"\nEl culpable era {historia['culpable']}")
                print(f"Utiliz√≥ {historia['arma']} en {historia['locacion']}")
                print(f"\nMotivo: {historia['motivo']}")
                print(f"{'='*50}")
                break
            else:
                print("\n‚ùå Acusaci√≥n incorrecta.")
                
                # Eliminar personaje incorrecto de sospechosos
                if personaje in personajes_disponibles:
                    personajes_disponibles.remove(personaje)
                    print(f"\n{personaje} ha sido eliminado de los sospechosos.")
                
                if not personajes_disponibles:
                    print("\n¬°Te has quedado sin sospechosos!")
                    print(f"\nLa soluci√≥n era: {historia['culpable']} con {historia['arma']} en {historia['locacion']}")
                    break
                
        elif opcion == "3":  # Ver personajes
            mostrar_personajes()
            input("\nPresiona Enter para continuar...")
            
        elif opcion == "4":  # Ver pistas descubiertas
            if pistas_descubiertas:
                print("\nüîç Pistas descubiertas:")
                for i, pista in enumerate(pistas_descubiertas, 1):
                    print(f"{i}. {pista}")
            else:
                print("\nA√∫n no has descubierto ninguna pista.")
            input("\nPresiona Enter para continuar...")
            
        else:
            print("Opci√≥n inv√°lida. Por favor elige 1-4.")

def main():
    print("""
    ====================================
    üïµÔ∏è‚ôÇÔ∏è BIENVENIDO AL SIMULADOR CLUE üïµÔ∏è‚ôÄÔ∏è
    ====================================
    
    Un juego de misterio y deducci√≥n donde
    debes descubrir al culpable de un crimen
    basado en pistas y tu razonamiento.
    """)
    
    while True:
        jugar_partida()
        
        continuar = input("\n¬øQuieres jugar otra partida? (s/n): ").lower()
        if continuar != 's':
            print("\n¬°Gracias por jugar! Hasta la pr√≥xima investigaci√≥n.")
            break

if __name__ == "__main__":
    main()
